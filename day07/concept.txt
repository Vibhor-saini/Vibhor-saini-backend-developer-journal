1. Why Exceptions?
An exception is an event that disrupts the normal flow of a program (e.g., dividing by zero, accessing a null object, invalid input).
Instead of crashing, we can handle exceptions gracefully.

ðŸ”¹ Concept: Exception Handling
Exception = runtime error that disrupts normal program flow.
Exception Handling = writing safe code so program wonâ€™t crash.

ðŸ‘‰ Common runtime exceptions:
ArithmeticException â†’ divide by 0
NullPointerException â†’ accessing null object
ArrayIndexOutOfBoundsException â†’ invalid array index
IOException â†’ file-related issues


ðŸ”¹ Syntax
try {
    // risky code (might throw error)
} catch (ExceptionType e) {
    // handle error
} finally {
    // (optional) cleanup code, always executes
}


// Note: If youâ€™re not sure what might happen, you can use a general catch:
// catch (Exception e) {
//     System.out.println("Something went wrong: " + e.getMessage());
// }
